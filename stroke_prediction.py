# -*- coding: utf-8 -*-
"""Stroke_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FD1Hd4ykyYyFniJZXnDH3uytmNcErdhr
"""

from google.colab import files
uploaded=files.upload()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from imblearn.pipeline import Pipeline
from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler
from sklearn.feature_selection import SelectKBest,f_classif
from sklearn.metrics import accuracy_score,f1_score,classification_report,precision_score,recall_score,confusion_matrix
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC

stroke=pd.read_excel('/content/healthcare-dataset-stroke-data.xlsx')

stroke.tail()

len(stroke)

stroke.columns

stroke['smoking_status'].unique()

stroke['smoking_status'].replace('Unknown',np.nan,inplace=True)

stroke['smoking_status']

stroke.columns

stroke.drop(['id'],axis=1,inplace=True)

stroke.shape[1]

stroke.isnull().sum()

stroke.dtypes

stroke['gender'].value_counts()

"""#Visualisation"""

# sns.countplot(data=stroke,x='gender')
sns.countplot(data=stroke,x='gender',hue='stroke')

sns.displot(stroke['age'])

sns.boxplot(data=stroke,x='stroke',y='age')

sns.countplot(data=stroke,x='hypertension',hue='stroke')

sns.countplot(data=stroke,x='heart_disease',hue='stroke')

sns.countplot(data=stroke,x='ever_married',hue='stroke')

sns.countplot(data=stroke,x='work_type',hue='stroke')

sns.countplot(data=stroke,x='Residence_type',hue='stroke')

sns.displot(stroke['avg_glucose_level'])

sns.boxplot(data=stroke,x='stroke',y='avg_glucose_level')

sns.displot(stroke['bmi'])

sns.boxplot(data=stroke,x='stroke',y='bmi')

sns.countplot(data=stroke,x='smoking_status',hue='stroke')

fig=plt.figure(figsize=(6,6))
# plt.bar(stroke['gender'],range(5110))
plt.title('Gender')
stroke['gender'].value_counts().plot.bar(color='red')

plt.title('Hypertension')
heightertension=[stroke['hypertension'].value_counts()[0],stroke['hypertension'].value_counts()[1]]
bhottension=['Negative','Positive']
plt.xlabel('Hypertension status')
plt.ylabel("No. of individuals")
plt.bar(bhottension,heightertension,color='blue')

plt.title('Heart disease')
heightertension=[stroke['heart_disease'].value_counts()[0],stroke['heart_disease'].value_counts()[1]]
bhottension=['Negative','Positive']
plt.xlabel('Heart disease status')
plt.ylabel("No. of individuals")
plt.bar(bhottension,heightertension,color='orange')

plt.title('Marital Status')
heightertension=[stroke['ever_married'].value_counts()[0],stroke['ever_married'].value_counts()[1]]
bhottension=['Married','Unmarried']
plt.ylabel("No. of individuals")
plt.bar(bhottension,heightertension,color='magenta')

plt.title('Work Type')
plt.ylabel("No. of individuals")
stroke['work_type'].value_counts().plot.bar(color='brown')

plt.title('Residence Type')
plt.ylabel("No. of individuals")
stroke['Residence_type'].value_counts().plot.bar(color='green')

plt.title('Smoking Status')
plt.ylabel("No. of individuals")
stroke['smoking_status'].value_counts().plot.bar(color='grey')

plt.title('Stroke Status')
plt.ylabel("No. of individuals")
heightertension=[stroke['stroke'].value_counts()[0],stroke['stroke'].value_counts()[1]]
bhottension=['Did not happen','Happened']
plt.bar(bhottension,heightertension,color='teal')

sns.boxplot(x='age',data=stroke,color='#6bab0c')
plt.title('Age distribution')

sns.boxplot(x='avg_glucose_level',data=stroke,color='#f53f07')
plt.title('Average Glucose level distribution')

sns.boxplot(x='bmi',data=stroke,color='#8d11c2')
plt.title('BMI distribution')

"""#Predicting values

##Encoding
"""

cols=stroke.select_dtypes(include=['object']).columns
ohe=LabelEncoder()
stroke[cols]=stroke[cols].apply(ohe.fit_transform)
stroke.head()

"""##Correlation heatmap"""

plt.figure(figsize=(12,10))
sns.heatmap(stroke.corr(),annot=True,fmt='.2')

"""##Handling null values"""

stroke['bmi'].fillna(stroke.bmi.median(),inplace=True)

stroke['smoking_status'].fillna(stroke['smoking_status'].mode()[0],inplace=True)

stroke.isnull().sum()

"""##Filtering attributes which affects stroke most"""

skb=SelectKBest(score_func=f_classif,k=5)
fits=skb.fit(stroke.drop('stroke',axis=1),stroke['stroke'])
scpd=pd.DataFrame(fits.scores_)
col=pd.DataFrame(stroke.drop('stroke',axis=1).columns)
fsc=pd.concat([col,scpd],axis=1)
fsc.columns=['Attribute','Score']
fsc.sort_values(by='Score',ascending=False)

colus=fsc[fsc['Score']>50].Attribute
colus

"""##Splitting dataset"""

train_x,test_x,train_y,test_y=train_test_split(stroke[colus],
                                               stroke['stroke'],
                                               random_state=1266,
                                               test_size=0.25)
train_x.shape,test_x.shape,train_y.shape,test_y.shape

"""##Sampling dataset"""

smote=SMOTE()
train_x,train_y=smote.fit_resample(train_x,train_y)
test_x,test_y=smote.fit_resample(test_x,test_y)
train_x.shape,test_x.shape,train_y.shape,test_y.shape

"""##Naive-Bayes Classifier"""

gnb=GaussianNB()
gnb.fit(train_x,train_y)
pred=gnb.predict(test_x)
accuracy_score(pred,test_y)

cf_nb=confusion_matrix(test_y,pred)

group_names = ['True Neg','False Pos','False Neg','True Pos']
group_counts = ["{0:0.0f}".format(value) for value in
                cf_nb.flatten()]
group_percentages = ["{0:.2%}".format(value) for value in
                     cf_nb.flatten()/np.sum(cf_nb)]
labels = [f"{v1}\n{v2}\n{v3}" for v1, v2, v3 in
          zip(group_names,group_counts,group_percentages)]
labels = np.asarray(labels).reshape(2,2)
sns.heatmap(cf_nb, annot=labels, fmt='', cmap='Blues')

precision_score(test_y,pred)

recall_score(test_y,pred)

f1_score(test_y,pred)

"""##K-NN Classifier"""

knn=KNeighborsClassifier(n_neighbors=1)
knn.fit(train_x,train_y)
predi=knn.predict(test_x)
accuracy_score(predi,test_y)

cf_knn=confusion_matrix(test_y,predi)

group_names = ['True Neg','False Pos','False Neg','True Pos']
group_counts = ["{0:0.0f}".format(value) for value in
                cf_knn.flatten()]
group_percentages = ["{0:.2%}".format(value) for value in
                     cf_knn.flatten()/np.sum(cf_knn)]
labels = [f"{v1}\n{v2}\n{v3}" for v1, v2, v3 in
          zip(group_names,group_counts,group_percentages)]
labels = np.asarray(labels).reshape(2,2)
sns.heatmap(cf_knn, annot=labels, fmt='', cmap='Blues')

precision_score(test_y,predi)

recall_score(test_y,predi)

f1_score(test_y,predi)

"""##Decision Tree Classifier"""

dtr=DecisionTreeClassifier()
dtr.fit(train_x,train_y)
ohyeah=dtr.predict(test_x)
accuracy_score(ohyeah,test_y)

cf_dtr=confusion_matrix(test_y,ohyeah)

group_names = ['True Neg','False Pos','False Neg','True Pos']
group_counts = ["{0:0.0f}".format(value) for value in
                cf_dtr.flatten()]
group_percentages = ["{0:.2%}".format(value) for value in
                     cf_dtr.flatten()/np.sum(cf_dtr)]
labels = [f"{v1}\n{v2}\n{v3}" for v1, v2, v3 in
          zip(group_names,group_counts,group_percentages)]
labels = np.asarray(labels).reshape(2,2)
sns.heatmap(cf_dtr, annot=labels, fmt='', cmap='Blues')

precision_score(test_y,ohyeah)

recall_score(test_y,ohyeah)

f1_score(test_y,ohyeah)